user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream services
    upstream core_api {
        least_conn;
        server core-api:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream user_service {
        least_conn;
        server user-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream ml_service {
        least_conn;
        server ml-service:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream streaming_service {
        least_conn;
        server streaming-service:9001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API v1 routes (Backend services)
        location /api/v1/tracks {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://core_api;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        location /api/v1/albums {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://core_api;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        location /api/v1/artists {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://core_api;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        location /api/v1/playlists {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://core_api;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        # User service routes
        location /api/v1/users {
            limit_req zone=api burst=15 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        location /api/v1/auth {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://user_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        # ML service routes
        location /recommendations {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://ml_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        location /similar-tracks {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://ml_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        location /user-interaction {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://ml_service;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        # Streaming service (WebSocket support)
        location /stream {
            proxy_pass http://streaming_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Frontend routes (fallback to existing Express server)
        location /api/ {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://frontend:8080;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        # Static files and frontend
        location / {
            proxy_pass http://frontend:8080;
            include /etc/nginx/conf.d/proxy_params.conf;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
    }
}
