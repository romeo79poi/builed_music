version: '3.8'

networks:
  catch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  cassandra-data:
  redis-data:
  kafka-data:
  zookeeper-data:
  prometheus-data:
  grafana-data:

services:
  # =============================================================================
  # Infrastructure Services
  # =============================================================================
  
  # PostgreSQL - Primary database for structured data
  postgres:
    image: postgres:15-alpine
    container_name: catch-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: catch_music
      POSTGRES_USER: catch_user
      POSTGRES_PASSWORD: catch_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catch_user -d catch_music"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    container_name: catch-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: catch-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    ports:
      - "2181:2181"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka - Event streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: catch-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: lz4
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./kafka/setup-topics.sh:/scripts/setup-topics.sh
    ports:
      - "29092:29092"
      - "9092:9092"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka Topics Setup
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: catch-kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:9092 1 40
        echo 'Creating Kafka topics...'
        /scripts/setup-topics.sh
        echo 'Kafka topics created successfully!'
      "
    environment:
      KAFKA_HOST: kafka:9092
    volumes:
      - ./kafka/setup-topics.sh:/scripts/setup-topics.sh
    networks:
      - catch-network

  # Cassandra - NoSQL database for time-series data
  cassandra:
    image: cassandra:4.1
    container_name: catch-cassandra
    restart: unless-stopped
    environment:
      CASSANDRA_CLUSTER_NAME: catch-cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      MAX_HEAP_SIZE: 2G
      HEAP_NEWSIZE: 400M
    volumes:
      - cassandra-data:/var/lib/cassandra
      - ./database/cassandra/schema.cql:/scripts/schema.cql
    ports:
      - "9042:9042"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # =============================================================================
  # Application Services
  # =============================================================================

  # C++ High-Performance Streaming Service
  streaming-service:
    build:
      context: ./cpp-streaming-service
      dockerfile: Dockerfile
    container_name: catch-streaming-service
    restart: unless-stopped
    ports:
      - "9001:9001"
    networks:
      - catch-network
    environment:
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Java Core API Service
  core-api:
    build:
      context: ./java-core-api
      dockerfile: Dockerfile
    container_name: catch-core-api
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DATABASE_URL: jdbc:postgresql://postgres:5432/catch_music
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: catch_music
      POSTGRES_USER: catch_user
      POSTGRES_PASSWORD: catch_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Go User Service
  user-service:
    build:
      context: ./go-user-service
      dockerfile: Dockerfile
    container_name: catch-user-service
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      DATABASE_URL: postgres://catch_user:catch_password@postgres:5432/catch_music?sslmode=disable
      REDIS_ADDR: redis:6379
      KAFKA_BROKERS: kafka:9092
      PORT: 8081
    ports:
      - "8081:8081"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python ML Recommendation Service
  ml-service:
    build:
      context: ./python-ml-service
      dockerfile: Dockerfile
    container_name: catch-ml-service
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: catch_music
      POSTGRES_USER: catch_user
      POSTGRES_PASSWORD: catch_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8000:8000"
    networks:
      - catch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring and Observability
  # =============================================================================

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: catch-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - catch-network

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: catch-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    networks:
      - catch-network

  # Kafka UI - Kafka management interface
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: catch-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: catch-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - catch-network

  # =============================================================================
  # Load Balancer and API Gateway
  # =============================================================================

  # Nginx - Load balancer and API gateway
  nginx:
    image: nginx:alpine
    container_name: catch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - core-api
      - user-service
      - ml-service
      - streaming-service
    networks:
      - catch-network

  # =============================================================================
  # Development and Testing Tools
  # =============================================================================

  # Adminer - Database administration tool
  adminer:
    image: adminer:latest
    container_name: catch-adminer
    restart: unless-stopped
    ports:
      - "8082:8080"
    networks:
      - catch-network

  # Redis Commander - Redis management interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: catch-redis-commander
    restart: unless-stopped
    ports:
      - "8083:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - catch-network
